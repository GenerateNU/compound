// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  dob              DateTime
  email            String?          @unique
  phoneNumber      String?          @unique
  registered        Boolean          @default(false)
  isAdmin     Boolean @default(false) // CLIENT ACCESS ONLY
  // gender           String
  // age              Int
  // ethnicity        String
  // education        String
  // maritalStatus    String
  // languages        String[]
  // employmentStatus String?          
  householdIncome  Float?          
  // livingStatus     String?          
  // accounts          Account[]
  // sessions          Session[]
  lessonsCompleted Int[]
  subModuleQuizScores Json
  moduleExamScores  Json
  progress          Progress[]
  intakeTests       IntakeTest[] // Probably get rid of this
  preferences      String[]
}

model IntakeTest {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  topic      String   // ex. "Earn", "Spend", etc.
  score      Int      // Score from 1-10
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Module {
  id          Int         @id @default(autoincrement())
  title       String
  subModules  SubModule[]
  moduleExam  ModuleExam? @relation
}

model SubModule {
  id        Int      @id @default(autoincrement())
  title     String
  moduleId  Int
  module    Module   @relation(fields: [moduleId], references: [id])
  lessons   Lesson[]
  subModuleQuiz SubModuleQuiz? @relation
}

model Lesson {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  order      Int
  subModuleId Int
  subModule   SubModule  @relation(fields: [subModuleId], references: [id])
}

model ModuleExam {
  id          Int      @id @default(autoincrement())
  moduleId    Int      @unique 
  module      Module   @relation(fields: [moduleId], references: [id])
  questions   String[]
  //passed      Boolean
  //score       Int
  answers     String[]
}


model SubModuleQuiz {
  id             Int       @id @default(autoincrement())
  subModuleId    Int        @unique
  subModule      SubModule @relation(fields: [subModuleId], references: [id])
  questions      String[] // Similar as above
  //passed         Boolean
  //score          Int
  answers        String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Progress {
  moduleId Int
  subModuleId Int
  id       Int    @id @default(autoincrement())
  lessonId Int
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
}
